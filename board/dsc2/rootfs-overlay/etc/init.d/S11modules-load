#!/bin/sh
#
# Use some scripting to mimic the systemd "modules-load" and the OpenRC
# "modules" services (load kernel modules based on static configuration).
#
# The configuration files should simply contain a list of kernel module
# names to load, separated by newlines. Empty lines and lines whose first
# non-whitespace character is # or ; are ignored.
#
# The configuration directory list and file format is the same as the one
# described in modules-load.d(5). Files are loaded in the following order:
#
#   /etc/modules-load.d/*.conf
#   /run/modules-load.d/*.conf
#   /usr/lib/modules-load.d/*.conf
#
# This roughly mimics the logic used by systemd but the files are not sorted
# by their filename in lexicographic order as systemd does.
#
# Notice that OpenRC uses /etc/modules-load.d/*.conf, only, and does not
# ignore lines beginning with ';'.
#

PROGRAM="modules-load"

MODULES_LOAD_ARGS=""

# Add "-q" to MODULES_LOAD_ARGS to disable error messages.
# shellcheck source=/dev/null
[ -r "/etc/default/$PROGRAM" ] && . "/etc/default/$PROGRAM"

# Files are read from directories in the MODULES_SOURCES list, in the given
# order. A file may be used more than once, since there can be multiple
# symlinks to it. No attempt is made to prevent this.
MODULES_SOURCES="/etc/modules-load.d/ /run/modules-load.d/ /usr/lib/modules-load.d/"

# If the logger utility is available all messages are sent to syslog, except
# for the final status. The file redirections do the following:
#
# - stdout is redirected to syslog with facility.level "kern.info"
# - stderr is redirected to syslog with facility.level "kern.err"
# - file dscriptor 4 is used to pass the result to the "start" function.
#
run_logger() {
       # shellcheck disable=SC2086 # we need the word splitting
       find $MODULES_SOURCES -maxdepth 1 -name '*.conf' -print0 2> /dev/null | \
       xargs -0 -r -n 1 readlink -f | {
               prog_status="OK"
               while :; do
                       read -r file || {
                               echo "$prog_status" >&4
                               break
                       }
                       echo "* Applying $file ..."
                       while :; do
                               read -r mod || break
                               case "$mod" in
                                       ''|'#'*|';'*) ;;
                                       *) /sbin/modprobe $MODULES_LOAD_ARGS "$mod" || prog_status="FAIL"
                               esac
                       done < "$file"
               done 2>&1 >&3 | /usr/bin/logger -t "$PROGRAM" -p kern.err
       } 3>&1 | /usr/bin/logger -t "$PROGRAM" -p kern.info
}

# If logger is not available all messages are sent to stdout/stderr.
run_std() {
       # shellcheck disable=SC2086 # we need the word splitting
       find $MODULES_SOURCES -maxdepth 1 -name '*.conf' -print0 2> /dev/null | \
       xargs -0 -r -n 1 readlink -f | {
               prog_status="OK"
               while :; do
                       read -r file || {
                               echo "$prog_status" >&4
                               break
                       }
                       echo "* Applying $file ..."
                       while :; do
                               read -r mod || break
                               case "$mod" in
                                       ''|'#'*|';'*) ;;
                                       *) /sbin/modprobe $MODULES_LOAD_ARGS "$mod" || prog_status="FAIL"
                               esac
                       done < "$file"
               done
       }
}

if [ -x /usr/bin/logger ]; then
       run_program="run_logger"
else
       run_program="run_std"
fi

start() {
       printf '%s %s: ' "$1" "$PROGRAM"
       status=$("$run_program" 4>&1)
       echo "$status"
       if [ "$status" = "OK" ]; then
               return 0
       fi
       return 1
}

case "$1" in
       start)
               start "Running";;
       restart|reload)
               start "Rerunning";;
       stop)
               :;;
       *)
               echo "Usage: $0 {start|stop|restart|reload}"
               exit 1
esac
